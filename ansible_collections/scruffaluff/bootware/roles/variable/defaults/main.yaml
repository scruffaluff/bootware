---
brew_prefix: >-
  {{ '/opt/homebrew' if ansible_architecture in ['aarch64', 'arm64'] else
  '/usr/local' }}
user_id: "{{ ansible_user_id }}"
user_home_:
  Darwin: "{{ '/root' if user_id == 'root' else '/Users/' + user_id }}"
  FreeBSD: "{{ '/root' if user_id == 'root' else '/home/' + user_id }}"
  Linux: "{{ '/root' if user_id == 'root' else '/home/' + user_id }}"
  # Backslashes are required for Windows Defender firewall rules.
  Win32NT: C:\Users\{{ user_id }}
user_home: "{{ user_home_.get(ansible_system, '/home/' + user_id) }}"

bash_completion_:
  Darwin: "{{ brew_prefix }}/share/bash-completion/completions"
  FreeBSD: /usr/local/share/bash-completion/completions
  Linux: /usr/share/bash-completion/completions
bash_executable_:
  Darwin: "{{ brew_prefix }}/bin/bash"
  FreeBSD: /usr/local/bin/bash
  Linux: /bin/bash
fish_completion_:
  Darwin: "{{ brew_prefix }}/etc/fish/completions"
  FreeBSD: /usr/local/etc/fish/completions
  Linux: /etc/fish/completions
fish_executable_:
  Darwin: "{{ brew_prefix }}/bin/fish"
  FreeBSD: /usr/local/bin/fish
  Linux: /usr/bin/fish
fish_vendor_completion_:
  Darwin: "{{ brew_prefix }}/share/fish/completions"
  FreeBSD: /usr/local/share/fish/completions
  Linux: /usr/share/fish/completions
github_api_token_: >-
  {{ lookup('ansible.builtin.env', 'BOOTWARE_GITHUB_TOKEN', default='') }}
group_id_:
  Darwin: "{{ 'wheel' if user_id == 'root' else 'staff' }}"
  FreeBSD: "{{ 'wheel' if user_id == 'root' else user_id }}"
  Linux: "{{ {'zypper': 'users'}.get(ansible_pkg_mgr, user_id) }}"
nushell_executable_:
  Darwin: "{{ brew_prefix }}/bin/nu"
  FreeBSD: /usr/local/bin/nu
  Linux: /usr/bin/nu
  Win32NT: C:\ProgramData\scoop\shims\nu.exe
nushell_vendor_autoload_:
  Darwin: /Library/Application Support/nushell/vendor/autoload
  FreeBSD: /usr/local/share/nushell/vendor/autoload
  Linux: /usr/local/share/nushell/vendor/autoload
  Win32NT: C:\ProgramData\nushell\vendor\autoload
nushell_user_vendor_autoload_:
  Darwin: "{{ user_home }}/Library/Application Support/nushell/vendor/autoload"
  FreeBSD: "{{ user_home }}/.local/share/nushell/vendor/autoload"
  Linux: "{{ user_home }}/.local/share/nushell/vendor/autoload"
  Win32NT: "{{ user_home }}\\AppData\\Roaming\\nushell\\vendor\\autoload"
system_libc_:
  Linux: "{{ 'musl' if ansible_pkg_mgr in ['apk', 'opkg'] else 'gnu' }}"
system_architecture_:
  64-bit: amd64
  64bit: amd64
  aarch64: arm64
  amd64: amd64
  arm64: arm64
  riscv64: riscv64
  x64: amd64
  x86_64: amd64
bash_completion: >-
  {{ bash_completion_.get(ansible_system,
  '/usr/share/bash-completion/completions') }}
bash_executable: "{{ bash_executable_.get(ansible_system, '/bin/bash') }}"
bash_user_completion: "{{ user_home }}/.local/share/bash-completion/completions"
brew_user: "{{ user_id }}"
fish_completion: >-
  {{ fish_completion_.get(ansible_system, '/etc/fish/completions') }}
fish_executable: "{{ fish_executable_.get(ansible_system, '/usr/bin/fish') }}"
fish_user_completion: "{{ user_home }}/.config/fish/completions"
fish_vendor_completion: >-
  {{ fish_vendor_completion_.get(ansible_system, '/usr/share/fish/completions')
  }}
font_size: 14
github_api_headers: >-
  {{ {'Authorization': 'Bearer ' + github_api_token_} if github_api_token_ else
  {} }}
group_id: "{{ group_id_.get(ansible_system, user_id) }}"
nushell_executable: >-
  {{  nushell_executable_.get(ansible_system, '/usr/bin/nu') }}
nushell_vendor_autoload: >-
  {{  nushell_vendor_autoload_.get(ansible_system,
  '/usr/local/share/nushell/vendor/autoload') }}
nushell_user_vendor_autoload: >-
  {{  nushell_user_vendor_autoload_.get(ansible_system, user_home +
  '.local/share/nushell/vendor/autoload') }}
powershell_executable: C:\\Program Files\\PowerShell\\7\\pwsh.exe
powershell_module_paths:
  - C:\\Program Files\\PowerShell\\Modules
  - C:\\Program Files\\WindowsPowerShell\\Modules
powershell_user_module_paths:
  - "{{ user_home }}\\Documents\\PowerShell\\Modules"
  - "{{ user_home }}\\Documents\\WindowsPowerShell\\Modules"
scoop_path: C:\ProgramData\scoop
scoop_user_path: "{{ user_home }}\\scoop"
system_architecture: "{{ system_architecture_.get(ansible_architecture, '') }}"
system_libc: "{{ system_libc_.get(ansible_system, '') }}"
user_login: "{{ 'powershell' if ansible_system == 'Win32NT' else 'bash' }}"
user_shell: nushell
